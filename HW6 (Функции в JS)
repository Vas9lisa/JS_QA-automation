Методы - заложенные в языке\фреймворке
Функция - то, что пишется самостоятельно
А так, это одно и то же

Обявление функиции (function declaration)
function name(pr1, pr2, ...){
   statements
   return expression;
   }
   
слово funktion + имя функции (name) + список параметров в круглых скобках через запяту (можно оставить круглые скобки пустыми)+
+ код функции внутри фигурных скобок (иногда есть return)

Названия функции делается по правилам создания переменных - буквы, цифры, _, $

Function Invocation - вызов функции:
1) При ивенте (действии пользователя) (нажатие на кнопку в Вебе)
2) Вызов внутри кода (Нами самостоятельно вызвана)
3) Автоматически(прописано в коде)


Вызывть функцию можно в любой момента, даже перед тем, как создать её. И она отработает

print([1,2,3])

function print (ar){
  console.log(ar);
  }
  
  void function ===> возвращает undefined  (ибо нет return)
  Return может находиться в любом месте тела кода
  
  
  Внутренние переменные, объявленные внутри функции, не видятся снаружи.
  Локальные переменные в первую очередь, а потом глобальные
  

function sum (a, b) {
return a+b
}
console.log(sum("sfd", "sdf"))
\\ конкатинацией склеются строки. Выведется "sfdsdf"




Function Expression
В ней ставится ; на конце(!)
Нельзя использовать такую функцию, до того, как её объявили.

let helk = function(name) {
console.log("hi, " + name);
};
helk("Vas9")

Используется редко. Можно легко запутаться.



Стрелочная функция
let sam = (a,b) => a+b;
console.log(sam(3,9))

